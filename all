import os
import re
import pandas as pd
from PyPDF2 import PdfReader

# Define the paths to your folders and files
excel_folder = r"D:\Python\ajit\birla\rename_excel"
pdf_file_folder = r"D:\Python\ajit\birla\rename_pdf"
output_folder = r"D:\Python\ajit\birla\sample_csv"
new_pdf_path = r"D:\Python\ajit\birla\moved"

# Regular expression patterns
folio_numbers_pattern = r'Folio Number\s*:\s*(\d+(?:\s*/\s*\d+)?)'
isin_pattern = r"INF209"

# Lists to store extracted data
inf = []
folio_list = []

def process_pdf_text(pdf_path):
    """
    Function to extract text from all pages of a given PDF.
    """
    reader = PdfReader(pdf_path)
    num_pages = len(reader.pages)
    combined_text = ""
    
    for i in range(num_pages):
        page = reader.pages[i]
        text = page.extract_text()
        if text:
            combined_text += text
    
    return combined_text

def extract_info_from_text(tes):
    """
    Function to extract relevant ISIN-related information from text.
    """
    tes = tes.replace(',', '').replace("(", "").replace(')', '').replace("NAV", "")
    indices = [m.start(0) for m in re.finditer(isin_pattern, tes)]

    extracted_data = []
    for i in indices:
        vv = tes[i:i+300]
        if "Redemption" in vv or "Purchase" in vv:
            vb = tes[i:i+13]
            vvv = vb.replace('\n', "")
            extracted_data.append(vvv)
    
    return extracted_data

# Loop through each Excel file
for excel_file in os.listdir(excel_folder):
    xl_path = os.path.join(excel_folder, excel_file)
    print(f"Processing Excel: {xl_path}")
    
    if xl_path.endswith(".xlsx"):
        xls = pd.ExcelFile(xl_path)
        table_names = xls.sheet_names
        
        all_groups = []
        all_tran = []
        c2 = []

        for sheet in table_names:
            df = pd.read_excel(xls, sheet_name=sheet, header=None)
            data_list = df.values.tolist()

            # Assuming a function `text_to_vector` and `get_cosine` to calculate cosine similarity
            # Iterate through the rows of the sheet and perform cosine similarity check
            for i in data_list[0:2]:
                s = str(i)
                vector1 = text_to_vector(predefined_string)  # Replace with actual string/vector
                vector2 = text_to_vector(s)
                cosine = get_cosine(vector1, vector2)

                if cosine > 0.48:
                    df = pd.read_excel(xls, sheet_name=sheet, header=None)
                    cleaned_data = process_and_clean_data(df.values.tolist())  # Placeholder for your cleaning functions
                    all_tran.extend(transaction_type(cleaned_data))

                    # Determine if it is a value-based group
                    groups = extract_values_from_date_regex(cleaned_data)
                    all_groups.extend(groups)

        # After processing Excel, match with corresponding PDF
        corresponding_pdf_file = excel_file.replace('.xlsx', '.pdf')
        pdf_path = os.path.join(pdf_file_folder, corresponding_pdf_file)

        if os.path.exists(pdf_path):
            print(f"Processing PDF: {pdf_path}")

            text = process_pdf_text(pdf_path)
            folio_numbers = re.findall(folio_numbers_pattern, text)
            folio_list.extend(folio_numbers)

            extracted_info = extract_info_from_text(text)
            inf.extend(extracted_info)

        # Create DataFrame using all_groups
        df = pd.DataFrame(all_groups)
        df['Transaction Type'] = pd.Series(all_tran)

        if folio_list:
            df['Folio Number'] = pd.Series([folio_list[0]] * len(df), index=df.index)
        
        if inf:
            # Assign ISIN number based on the length of each group
            isin_expanded = []
            inf_index = 0
            for group in all_groups:
                group_len = len(group) if isinstance(group, list) else 1
                isin_expanded.extend([inf[inf_index]] * group_len)
                inf_index += 1

            df['ISIN Number'] = pd.Series(isin_expanded, index=df.index)

        if c2:
            df['Company Name'] = pd.Series([c2[0]] * len(df), index=df.index)

        # Save the DataFrame to CSV
        csv_filename = f"{os.path.splitext(excel_file)[0]}.csv"
        csv_path = os.path.join(output_folder, csv_filename)
        df.to_csv(csv_path, index=False)
        print(f"Data saved to {csv_path}")

        # Clean up lists for next iteration
        inf.clear()
        folio_list.clear()
        all_groups.clear()
        all_tran.clear()
        c2.clear()
