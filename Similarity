# Function to calculate Jaccard similarity between two lists
def jaccard_similarity(list1, list2):
    # Convert lists to sets
    set1 = set(list1)
    set2 = set(list2)
    
    # Calculate the intersection and union of the sets
    intersection = set1.intersection(set2)
    union = set1.union(set2)
    
    # Calculate the Jaccard similarity score
    if not union:  # Handle case where union is empty
        return 0.0
    similarity_score = len(intersection) / len(union)
    
    return similarity_score

# Example lists
list1 = ["apple", "banana", "cherry", "date"]
list2 = ["banana", "cherry", "date", "elderberry"]

# Calculate the similarity score between the two lists
similarity_score = jaccard_similarity(list1, list2)

print("List 1:", list1)
print("List 2:", list2)
print("Jaccard Similarity Score:", similarity_score)
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def calculate_cosine_similarity(list1, list2, index):
    """
    Calculate the cosine similarity between the content at the specified index
    of two lists.
    
    Parameters:
    - list1: First list of strings
    - list2: Second list of strings
    - index: Index position of the content to compare (e.g., 0 for 0th position)
    
    Returns:
    - similarity_score: The cosine similarity score between the two specified strings
    """
    # Extract the content from the specified index
    content1 = list1[index]
    content2 = list2[index]
    
    # Combine the two sentences into a list
    documents = [content1, content2]
    
    # Convert the text into a matrix of token counts
    vectorizer = CountVectorizer().fit_transform(documents)
    vectors = vectorizer.toarray()
    
    # Calculate the cosine similarity between the vectors
    cosine_sim = cosine_similarity(vectors)
    
    # Return the similarity score between the two documents
    return cosine_sim[0, 1]

# Example usage:
list1 = ["This is the first sentence.", "Another sentence for comparison."]
list2 = ["This is the first sentence.", "A different sentence altogether."]

# Compare the 0th position content
similarity_score_0 = calculate_cosine_similarity(list1, list2, 0)

# Compare the 1st position content
similarity_score_1 = calculate_cosine_similarity(list1, list2, 1)

print(f"Cosine Similarity at 0th position: {similarity_score_0}")
print(f"Cosine Similarity at 1st position: {similarity_score_1}")
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def calculate_cosine_similarity_with_predefined_string(predefined_string, data_list):
    """
    Calculate the cosine similarity between a predefined string and the content at both the 0th and 1st
    positions of a list of strings (converted from a table).
    
    Parameters:
    - predefined_string: The string to compare with the list content.
    - data_list: A list of strings (e.g., content from a table converted into a list).
    
    Returns:
    - similarities: A dictionary containing cosine similarity scores for both the 0th and 1st positions.
    """
    similarities = {}
    
    # Iterate through the 0th and 1st positions (if available) and calculate similarity
    for index in range(min(2, len(data_list))):  # Only checks 0th and 1st positions if they exist
        content = data_list[index]
        
        # Combine the predefined string and the list content into a list
        documents = [predefined_string, content]
        
        # Convert the text into a matrix of token counts
        vectorizer = CountVectorizer().fit_transform(documents)
        vectors = vectorizer.toarray()
        
        # Calculate the cosine similarity between the vectors
        cosine_sim = cosine_similarity(vectors)
        
        # Store the similarity score in the dictionary with the corresponding position
        similarities[f"position_{index}"] = cosine_sim[0, 1]
    
    return similarities

# Example usage:
predefined_string = "This is a predefined sentence."
list_from_table = ["This is the first sentence.", "Another sentence for comparison.", "Extra content not compared."]

# Calculate cosine similarities
similarities = calculate_cosine_similarity_with_predefined_string(predefined_string, list_from_table)

print("Cosine Similarities:")
for position, score in similarities.items():
    print(f"{position}: {score}")
