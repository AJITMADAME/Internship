import os
import re
import pandas as pd
from PyPDF2 import PdfReader

def folio_num(pdf_file):
    folio = []

    # Regex patterns for capturing the folio numbers
    patterns = r'(?:page|\d+)Folio\s*No\.\s*([\d\s/]+)'  # This captures the folio number with the slash
    patterns1 = r'(?:page|\d+)Folio\s*No\.\s*(\d{8,10}\s*/\s*\d{1,3})'  # This captures the 8-10 digit number with the number after the slash
    
    for k in os.listdir(pdf_file):
        pdf_path = os.path.join(pdf_file, k)
        # Reading the PDF file
        reader = PdfReader(pdf_path)
        page = reader.pages[0]

        # Extracting text from the page
        text = page.extract_text()

        # Finding matches using the patterns
        numbers = re.findall(patterns, text)
        if len(numbers) == 0:
            folio1 = re.findall(patterns1, text)
            folio.append(folio1)
        else:
            folio.append(numbers)
    
    return folio

for i in os.listdir(file):
    xl_path = os.path.join(file, i)
    csv_filename = f"{os.path.splitext(i)[0]}.csv"
    csv_path = os.path.join(output_folder, csv_filename)

    if xl_path.endswith("xlsx"):
        xls = pd.ExcelFile(xl_path)
        table_name = xls.sheet_names
        all_groups = []
        all_tran = []
        all_isni = []
        iii = []

        for j in table_name:
            df1 = pd.read_excel(xls, sheet_name="Page 1 Table 1", header=None)
            a1 = df1.values.tolist()

            c = company_name(a1)

            df = pd.read_excel(xls, sheet_name=j, header=None)
            a = df.values.tolist()

            for item in a[0:2]:
                s = str(item)
                vector1 = text_to_vector(predefined_string)
                vector2 = text_to_vector(s)
                cosine = get_cosine(vector1, vector2)

                if cosine >= 0.07:
                    q = removed_lien(a)
                    v = process_e1(q)
                    z1 = filter_digit_starting_items(v)
                    removed_items = process_exit_load(z1)
                    b2 = cleaned_data(removed_items)
                    u = transaction_type(removed_items)

                    all_tran.extend(u)
                    ins = insi_num(a)
                    if len(u) >= 1:
                        iii.append(ins)

            empty_list = [x for x in iii if x != []]
            if len(u) < len(empty_list):
                empty_list.pop(0)

            m = v[0][0]
            if m[:1].isdigit():
                start_position = 2
                groups = create_groups(b2, start_position)
            else:
                start_position = 0
                groups = create_groups(b2, start_position)

            all_groups.extend(groups)
            all_isni.extend(empty_list * len(groups))

        # Create DataFrame from all_groups
        df = pd.DataFrame(all_groups)

        # Check if the DataFrame is empty
        if df.empty:
            print(f"Removing {k} due to empty DataFrame.")
            os.remove(pdf_path)  # Remove the PDF file
        else:
            if df.shape[1] > 2:
                fo = folio_num(pdf_file)
                df.columns = ['Amount (INR)', 'NAV(INR)', 'Price(INR)', 'No_of_Unit', 'Balance Unit', 'Date']

                # Adding the first value of company name and folio number as Series
                df['Company Name'] = pd.Series([c[0]] * len(df), index=df.index)
                df['Folio Number'] = pd.Series([fo[0]] * len(df), index=df.index)

                # Add Transaction Type and ISIN Number columns
                df['Transaction Type'] = pd.Series(all_tran)
                df['ISIN Number'] = pd.Series(all_isni)

                # Remove the first element after it's added to the DataFrame
                c.pop(0)
                fo.pop(0)

                # Save DataFrame to CSV
                df.to_csv(csv_path, index=False)
                print(df)
            else:
                print(f"Skipping {k} due to insufficient data.")
